name: Build
on:
  push:
    branches: main
  pull_request:
    branches: main

permissions:
  contents: read
  packages: write
env:
  CARGO_TERM_COLOR: always
  CACHE_VERSION: v0
jobs:
  build-container:
    name: Build container image
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ format('{0}-{1}', github.ref, github.job) }}
    outputs:
        tag: ${{ steps.image-tag.outputs.tag}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: image-tag
        run: |
          echo "tag=${{ hashFiles('**images/Dockerfile.build') }}" >> $GITHUB_OUTPUT
     
      - name: Check if container build needs to run
        uses: actions/cache@v3
        id: check-change
        with:
          path: |
            images/Dockerfile.build
          key: build-image-marker-${{ runner.os }}-${{ hashFiles('**images/Dockerfile.build') }}-${{env.CACHE_VERSION}}

      - name: Set up container buildx
        if: steps.check-change.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Login to Github Container Registry
        if: steps.check-change.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username:  ${{ github.actor }}
          password:  ${{ secrets.GITHUB_TOKEN }}

      - name: Create Docker Build Image
        id: build-and-push
        if: steps.check-change.outputs.cache-hit != 'true' && github.event.pull_request.head.repo.full_name == github.repository
        uses: docker/build-push-action@v2
        timeout-minutes: 15
        with:
          context: .
          file: images/Dockerfile.build
          push: true
          build-args: CACHE_VERSION=${{env.CACHE_VERSION}}
          tags: ghcr.io/${{ github.repository }}/aurae-builder:latest,ghcr.io/${{ github.repository }}/aurae-builder:${{ steps.image-tag.outputs.tag}}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Fail if fork is changing Dockerfile
        id: build
        if: github.event.pull_request.head.repo.full_name != github.repository
        run: |
          ## If the fork has changed the Dockerfile, we need to fail the pipeline.
          ## This is to prevent a case where a forked repo could expect changes in the Dockerfile
          ## to be used in the build process.
          git diff --quiet HEAD origin/main -- images/Dockerfile.build || exit 1

  build-docs-with-container:
    name: Build Docs
    runs-on: ubuntu-latest
    needs: build-container
    container:
      image: ghcr.io/${{ github.repository }}/aurae-builder:latest
      credentials:
        username:  ${{ github.actor }}
        password:  ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: build-docs-test-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{env.CACHE_VERSION}}
      
      - name: Check docs (make check-docs)
        run: |
          make check-docs

      - name: Docs (make docs)
        run: |
          make docs

  build:
    name: Build (lint, compile, test)
    runs-on: ubuntu-latest
    needs: build-container
    timeout-minutes: 20
    container:
      image: ghcr.io/${{ github.repository }}/aurae-builder:latest
      credentials:
        username:  ${{ github.actor }}
        password:  ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: build-lint-test-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{env.CACHE_VERSION}}

#      - name: Build (make build)
#        run: make build

      - name: Lint (make lint)
        run: make lint

      - name: Tests (make test)
        run: make testci
