/* -------------------------------------------------------------------------- *\
 *             Apache 2.0 License Copyright © 2022 The Aurae Authors          *
 *                                                                            *
 *                +--------------------------------------------+              *
 *                |   █████╗ ██╗   ██╗██████╗  █████╗ ███████╗ |              *
 *                |  ██╔══██╗██║   ██║██╔══██╗██╔══██╗██╔════╝ |              *
 *                |  ███████║██║   ██║██████╔╝███████║█████╗   |              *
 *                |  ██╔══██║██║   ██║██╔══██╗██╔══██║██╔══╝   |              *
 *                |  ██║  ██║╚██████╔╝██║  ██║██║  ██║███████╗ |              *
 *                |  ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝ |              *
 *                +--------------------------------------------+              *
 *                                                                            *
 *                         Distributed Systems Runtime                        *
 *                                                                            *
 * -------------------------------------------------------------------------- *
 *                                                                            *
 *   Licensed under the Apache License, Version 2.0 (the "License");          *
 *   you may not use this file except in compliance with the License.         *
 *   You may obtain a copy of the License at                                  *
 *                                                                            *
 *       http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                            *
 *   Unless required by applicable law or agreed to in writing, software      *
 *   distributed under the License is distributed on an "AS IS" BASIS,        *
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *   See the License for the specific language governing permissions and      *
 *   limitations under the License.                                           *
 *                                                                            *
\* -------------------------------------------------------------------------- */

syntax = "proto3";

package runtime;

option go_package = "github.com/aurae-runtime/client-go/pkg/api/v0/runtime";

import "meta.proto";

// Runtime is a synchronous subsystem which defines the main methods for executing and starting
// workloads within an Aurae system.
//
service Runtime {

  // Run an Executable, the most fundamental runtime process.
  // * Already exists on system
  rpc RunExecutable(Executable) returns (ExecutableStatus) {}

  // Run a set of containers in a unique sandbox micro instance, similar to Firecracker's jailer.
  // * Pull from a remote OCI registry.
  // * Runs on opinionated (configurable?) kernel/OS image with Auraed.
  // * RunPod calls RunMicroInstance() and then calls the recursive/subsequent RunCell() method.
  rpc RunPod(Pod) returns (PodStatus) {}

  // Spawn a short lived (ephemeral) nested virtual instance of Aurae
  // which will terminate on exit. Each instance runs an isolated kernel and
  // guarantees the spawned auraed has the same version and safe connectivity to the parent.
  // * Manages a security boundary for packets, block devices between the new spawned instance.
  // * Pull from a remote OCI registry
  // * Assumes a specific Linux kernel and corresponding userspace with Auraed
  // * Creates necessary "pipe" between the two auraed's using net devices and gRPC.
  // * Manages mTLS certificates as necessary.
  rpc Spawn(SpawnRequest) returns (SpawnResponse) {}

  // Run a long lived virtual instance which will persist on exit.
  // * Pull from a remote registry (e.g. qcow format)
  rpc RunVirtualMachine(VirtualMachine) returns (VirtualMachineStatus) {}

  // Run a set of containers in a unique Cgroup with shared namespaces.
  // * Pull from a remote OCI registry.
  // * Runs directly on the same kernel as the listening Auraed.
  rpc RunCell(Cell) returns (CellStatus) {}

}

// Executable is the lowest level of compute that Aurae can execute. A basic process.
message Executable {
  meta.AuraeMeta meta = 1;

  /// Command resembles systemd's ExecStart. This is the shell command (with arguments) you intend to execute.
  string command = 3;

  /// Comment is an arbitrary (user defined) comment used to identify the Executable at runtime.
  string comment = 4;
}

// ExecutableStatus is only returned after a process completes. Because runtime is a synchronous subsystem
// this will only return upon a terminated process.
message ExecutableStatus {
  meta.AuraeMeta meta = 1;
  meta.ProcessMeta proc = 2;
  meta.Status status = 3;

  // The full stdout data.
  string stdout = 4;

  // The full stderr data.
  string stderr = 5;

  // The exit code (return code) of the process after termination.
  string exit_code = 6;
}

// Pod is a group of containers running in a spawned Aurae instance.
message Pod {
  meta.AuraeMeta meta = 1;

  // A set of containers.
  repeated Container containers = 2;
}

// PodStatus is the status of a completed pod and its subsequent containers.
message PodStatus {
  meta.AuraeMeta meta = 1;
  meta.Status status = 3;

  // A set of container statuses.
  repeated ContainerStatus containers = 4;
}

// Container represents is an OCI compliant container image which can be executed.
message Container {
  meta.AuraeMeta meta = 1;

  // OCI compliant image.
  string image = 2;
}

// ContainerStatus is the status of a container after it has been executed.
message ContainerStatus {
  meta.AuraeMeta meta = 1;
  meta.ProcessMeta proc = 2;
  meta.Status status = 3;
}

message VirtualMachine {
  meta.AuraeMeta meta = 1;
  string name = 2;
  string image = 3;
}

message VirtualMachineStatus {
  meta.AuraeMeta meta = 1;
  meta.Status status = 2;
}


message SpawnRequest {
}

message SpawnResponse {
}

message Cell {
  meta.AuraeMeta meta = 1;
}

message CellStatus {
  meta.AuraeMeta meta = 1;
  meta.Status status = 2;
}
